// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const authContainer = document.getElementById('auth-container');
const appContainer = document.getElementById('app-container');
const usernameInput = document.getElementById('username');
const passwordInput = document.getElementById('password');
const loginBtn = document.getElementById('loginBtn');
const authMessage = document.getElementById('authMessage');
const logoutBtn = document.getElementById('logoutBtn');
const taskInput = document.getElementById('taskInput');
const addBtn = document.getElementById('addBtn');
const taskList = document.getElementById('taskList');
const shareBtn = document.getElementById('shareBtn');
const modal = document.getElementById('modal');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
const TELEGRAM_BOT_TOKEN = '7790946474:AAHlaH712c4ucgsXGbeQS3CTCHXBW2mYotg';
const TELEGRAM_CHAT_ID = '1010330513';
const AUTO_SEND_DELAY = 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏)
const USERS = {
  '–í–∏–∫—Ç–æ—Ä–∏—è': '12345',  // –õ–æ–≥–∏–Ω: –í–∏–∫—Ç–æ—Ä–∏—è, –ü–∞—Ä–æ–ª—å: 12345
  '1': '1', 
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
let currentUser = localStorage.getItem('todoUser');
let tasks = [];
let sendTimeout = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
  if (currentUser && USERS[currentUser]) {
    showApp();
  } else {
    showAuth();
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
  tasks = JSON.parse(localStorage.getItem(`todoTasks_${currentUser}`)) || [];
  renderTasks();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showAuth() {
  authContainer.style.display = 'flex';
  appContainer.style.display = 'none';
  currentUser = null;
  localStorage.removeItem('todoUser');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
function showApp() {
  authContainer.style.display = 'none';
  appContainer.style.display = 'block';
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  tasks = JSON.parse(localStorage.getItem(`todoTasks_${currentUser}`)) || [];
  renderTasks();
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function login() {
  const username = usernameInput.value.trim();
  const password = passwordInput.value.trim();
  
  if (!username || !password) {
    showAuthMessage('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
    return;
  }
  
  if (!USERS[username]) {
    showAuthMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  if (USERS[username] !== password) {
    showAuthMessage('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    return;
  }
  
  // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  currentUser = username;
  localStorage.setItem('todoUser', username);
  showApp();
  
  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  if (tasks.length > 0) {
    setTimeout(() => {
      sendDataToTelegram(tasks, true);
    }, 2000);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function showAuthMessage(message) {
  authMessage.textContent = message;
  setTimeout(() => {
    authMessage.textContent = '';
  }, 3000);
}

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function logout() {
  currentUser = null;
  localStorage.removeItem('todoUser');
  tasks = [];
  showAuth();
  usernameInput.value = '';
  passwordInput.value = '';
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
function saveTasks() {
  localStorage.setItem(`todoTasks_${currentUser}`, JSON.stringify(tasks));
  scheduleAutoSend();
}

// –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É
function scheduleAutoSend() {
  if (sendTimeout) clearTimeout(sendTimeout);
  sendTimeout = setTimeout(() => {
    if (tasks.length > 0) {
      sendDataToTelegram(tasks, true)
        .catch(error => console.error('Auto-send error:', error));
    }
  }, AUTO_SEND_DELAY);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
function addTask() {
  const text = taskInput.value.trim();
  
  if (text) {
    const newTask = {
      id: Date.now(),
      text,
      completed: false
    };
    
    tasks.push(newTask);
    renderTasks();
    saveTasks();
    taskInput.value = '';
    taskInput.focus();
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
function deleteTask(id) {
  tasks = tasks.filter(task => task.id !== id);
  renderTasks();
  saveTasks();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
function toggleComplete(id) {
  tasks = tasks.map(task => 
    task.id === id ? { ...task, completed: !task.completed } : task
  );
  renderTasks();
  saveTasks();
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
function editTask(id, newText) {
  tasks = tasks.map(task => 
    task.id === id ? { ...task, text: newText } : task
  );
  renderTasks();
  saveTasks();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
function renderTasks() {
  taskList.innerHTML = '';
  
  if (tasks.length === 0) {
    taskList.innerHTML = `
      <div class="empty-state">
        <svg width="120" height="120" viewBox="0 0 24 24" fill="none" stroke="#ccc" stroke-width="1">
          <path d="M9 5H7C5.89543 5 5 5.89543 5 7V19C5 20.1046 5.89543 21 7 21H17C18.1046 21 19 20.1046 19 19V7C19 5.89543 18.1046 5 17 5H15M9 5C9 6.10457 9.89543 7 11 7H13C14.1046 7 15 6.10457 15 5M9 5C9 3.89543 9.89543 3 11 3H13C14.1046 3 15 3.89543 15 5M12 12V16M15 14H9"/>
        </svg>
        <h3>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç</h3>
        <p>–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É</p>
      </div>
    `;
    return;
  }
  
  tasks.forEach(task => {
    const taskEl = document.createElement('li');
    taskEl.className = `task-item ${task.completed ? 'completed' : ''}`;
    
    taskEl.innerHTML = `
      <input 
        type="checkbox" 
        class="task-checkbox"
        ${task.completed ? 'checked' : ''}
        onchange="toggleComplete(${task.id})"
        aria-label="${task.completed ? '–°–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É' : '–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º'}"
      >
      <div class="task-content">${escapeHTML(task.text)}</div>
      <div class="task-actions">
        <button class="btn btn-edit" onclick="startEdit(${task.id})" aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#FF9800">
            <path d="M11 4H4C3.46957 4 2.96086 4.21071 2.58579 4.58579C2.21071 4.96086 2 5.46957 2 6V20C2 20.5304 2.21071 21.0391 2.58579 21.4142C2.96086 21.7893 3.46957 22 4 22H18C18.5304 22 19.0391 21.7893 19.4142 21.4142C19.7893 21.0391 20 20.5304 20 20V13M18.4142 2.58579C19.1953 1.80474 20.4617 1.80474 21.2426 2.58579C22.0236 3.36683 22.0236 4.63316 21.2426 5.41421L12 14.6569L8 15.6569L9 11.6569L18.4142 2.58579Z"/>
          </svg>
        </button>
        <button class="btn btn-delete" onclick="deleteTask(${task.id})" aria-label="–£–¥–∞–ª–∏—Ç—å">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#F44336">
            <path d="M4 7H20M10 11V17M14 11V17M5 7L6 19C6 20.1046 6.89543 21 8 21H16C17.1046 21 18 20.1046 18 19L19 7M9 7V4C9 3.44772 9.44772 3 10 3H14C14.5523 3 15 3.44772 15 4V7"/>
          </svg>
        </button>
      </div>
    `;
    
    taskList.appendChild(taskEl);
  });
}

// –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function startEdit(id) {
  const task = tasks.find(t => t.id === id);
  if (!task) return;
  
  const taskEl = document.querySelector(`.task-item input[onchange="toggleComplete(${id})"]`).closest('.task-item');
  if (!taskEl) return;
  
  const contentDiv = taskEl.querySelector('.task-content');
  const originalText = task.text;
  
  contentDiv.innerHTML = `
    <input 
      type="text" 
      class="edit-input" 
      value="${escapeHTML(originalText)}"
      onkeydown="handleEditKey(event, ${id})"
      aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
    >
    <div class="edit-buttons">
      <button onclick="confirmEdit(${id})" class="btn-save">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      <button onclick="cancelEdit(${id}, '${escapeHTML(originalText)}')" class="btn-cancel">–û—Ç–º–µ–Ω–∞</button>
    </div>
  `;
  
  const input = contentDiv.querySelector('.edit-input');
  input.focus();
  input.select();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
function handleEditKey(event, id) {
  if (event.key === 'Enter') {
    confirmEdit(id);
  } else if (event.key === 'Escape') {
    const task = tasks.find(t => t.id === id);
    cancelEdit(id, task.text);
  }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function confirmEdit(id) {
  const input = document.querySelector(`.edit-input`);
  if (!input) return;
  
  const newText = input.value.trim();
  if (newText) {
    editTask(id, newText);
  } else {
    alert('–ó–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
  }
}

// –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cancelEdit(id, originalText) {
  editTask(id, originalText);
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHTML(str) {
  return str.replace(/[&<>"']/g, 
    tag => ({
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    }[tag]));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
async function sendDataToTelegram(tasksData, isAutoSend = false) {
  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    console.error('Telegram token or chat ID not set');
    return;
  }

  const apiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  let message = `<b>üìã ${isAutoSend ? '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' : '–°–ø–∏—Å–æ–∫'} –∑–∞–¥–∞—á:</b>\n`;
  message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>${currentUser}</b>\n\n`;
  
  tasksData.forEach((task, index) => {
    message += `${index + 1}. ${task.completed ? '‚úÖ' : '‚¨ú'} ${escapeHTML(task.text)}\n`;
  });
  
  const completedCount = tasksData.filter(t => t.completed).length;
  message += `\n–í—Å–µ–≥–æ: ${tasksData.length} | –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedCount}`;

  try {
    // –î–ª—è –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    if (!isAutoSend) {
      showModal('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram...');
    }

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      })
    });

    const result = await response.json();

    if (!isAutoSend) {
      if (result.ok) {
        showModal('‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      } else {
        showModal(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${result.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }
    
    return result;
  } catch (error) {
    console.error('Error:', error);
    if (!isAutoSend) {
      showModal('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    throw error;
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showModal(message) {
  modal.style.display = 'flex';
  modal.innerHTML = `
    <div class="modal-content">
      <p>${message}</p>
    </div>
  `;
  
  setTimeout(() => {
    modal.style.display = 'none';
  }, 3000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
loginBtn.addEventListener('click', login);
logoutBtn.addEventListener('click', logout);

passwordInput.addEventListener('keypress', (e) => {
  if (e.key === 'Enter') login();
});

addBtn.addEventListener('click', addTask);
taskInput.addEventListener('keypress', (e) => {
  if (e.key === 'Enter') addTask();
});

shareBtn.addEventListener('click', () => {
  if (tasks.length === 0) {
    showModal('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!');
    return;
  }
  sendDataToTelegram(tasks);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initApp();